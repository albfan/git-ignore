#!/bin/bash

#set -xv

GIT_DIRECTORY=$(git rev-parse --git-dir)
FILE_EXCLUDE="$GIT_DIRECTORY/info/exclude"
FILE_IGNORE="$GIT_DIRECTORY/../.gitignore"
FILE_DEST="$FILE_EXCLUDE"

function help {
   cat >&2 <<EOF

Get rid of those noisy files

Target file configuration:
   -x, --exclude      File target $FILE_EXCLUDE (default)
   -i, --ignore       File target $FILE_IGNORE
   -f, --file=FILE    Use custom target file FILE

Commands:
   -l, --list         Shows content of target file
   -e, --edit         Opens editor for target file
       --untracked    Exclude all untracked files
       --remove-last  Remove last line of target file
   -h, --help         Shows this help

Porcelain commands:
   -a, --add=REGEX  Add REGEX to target file (must take care of shell expansion)
                     though as a verbose command for scripting

Examples:

 $ git ignore target
 $ git ignore -i .project .classpath .settings
 $ git ignore -i .idea/ '*.ipr' '*.iws' -x target
 $ git ignore -x --add '*.bak'
 $ git ignore -x -e

EOF
   exit 1
}

if [ $# == 0 ]
then 
   cat >&2 <<EOF

At least one argument must be provided
EOF
   help
fi

TEMP=$(getopt -o "leha:f:ixu" -l add:,list,edit,remove-last,file:,help,ignore,exclude,untracked -n $(basename $0) -- "$@" || help)

# process script arguments
eval set -- "$TEMP"

while true
do
   case "$1" in
      -a|--add)
         echo $2 >> "$FILE_DEST" 
         shift 
         ;;
      -f|--file)
         FILE_DEST="$2" 
         shift 
         ;;
      -x|--exclude)
         FILE_DEST="$FILE_EXCLUDE" 
         ;;
      -i|--ignore)
         FILE_DEST="$FILE_IGNORE" 
         ;;
      -l|--list) 
         cat $FILE_DEST
         exit 0;;
      -e|--edit)
         $(git var GIT_EDITOR) $FILE_DEST
         exit 0;;   
      --remove-last)
         sed -i '$d' $FILE_DEST
         exit 0;;   
      -u|--untracked)
         git ls-files --others --exclude-standard >> "$FILE_DEST"
         exit 0;;   
      -h|--help) # --help is captured by git and converted in git help so is useless by now
         help ;;
      --) 
         shift
         for param
         do
            echo "$param" >> "$FILE_DEST" 
         done   
         break ;;
      *) 
         cat <&2 <<EOF

Error, unknown arguments $@
EOF
         help
         exit 1 ;;
   esac
   shift
done

