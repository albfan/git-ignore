#!/bin/bash

# Copyright 2021 Alberto Fanjul <albertofanjul@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#set -xv

IGNORE_FILE=".gitignore"
GIT_DIRECTORY=$(git rev-parse --git-dir)
FILE_EXCLUDE="$GIT_DIRECTORY/info/exclude"
FILE_IGNORE="$GIT_DIRECTORY/../$IGNORE_FILE"
FILE_DEST="$FILE_EXCLUDE"
GLOBAL_FILE_IGNORE="$(git config --global --get core.excludesFile)"
VERSION=@VERSION@

function help {
   cat >&2 <<EOF

Get rid of those noisy files

Target file configuration:
   -x, --exclude      File target $FILE_EXCLUDE (default)
   -i, --ignore       File target $FILE_IGNORE
   -f, --file=FILE    Use custom target file FILE
   -r, --relative     File target $IGNORE_FILE on current dir
   -g, --global       File target (${GLOBAL_FILE_IGNORE:-undefined})

Commands:
   -l, --list         Shows content of target file
   -e, --edit         Opens editor for target file
       --untracked    Exclude all untracked files
       --remove-last  Remove last line of target file
   -h, --help         Shows this help
   -v, --version      Shows git ignore version

Porcelain commands:
   -a, --add=REGEX  Add REGEX to target file (must take care of shell expansion)
                     though as a verbose command for scripting

Examples:

 $ git ignore target
 $ git ignore -i .project .classpath .settings
 $ git ignore -i .idea/ '*.ipr' '*.iws' -x target
 $ git ignore -x --add '*.bak'
 $ git ignore -x -e

EOF
   exit 1
}

TEMP=$(getopt -o "leha:f:ixurgv" -l add:,list,edit,remove-last,file:,help,ignore,exclude,untracked,global,relative,version -n $(basename $0) -- "$@" || help)

# process script arguments
eval set -- "$TEMP"

while true
do
   case "$1" in
      -v|--version)
         echo "$VERSION"
	 exit 0
         ;;
      -a|--add)
         echo $2 >> "$FILE_DEST"
         shift
         ;;
      -f|--file)
         FILE_DEST="$2"
         shift
         ;;
      -g|--global)
         if [ -n "$GLOBAL_FILE_IGNORE" ]
         then
           FILE_DEST="$GLOBAL_FILE_IGNORE"
         else
           cat <&2 <<EOF

Error, global ignore file not defined. It can be done with:

git config --global core.excludesFile ~/.gitignore
EOF
           exit 1
         fi
         ;;
      -r|--relative)
         FILE_DEST="$IGNORE_FILE"
         ;;
      -x|--exclude)
         FILE_DEST="$FILE_EXCLUDE"
         ;;
      -i|--ignore)
         FILE_DEST="$FILE_IGNORE"
         ;;
      -l|--list)
         cat $FILE_DEST
         exit 0;;
      -e|--edit)
         $(git var GIT_EDITOR) $FILE_DEST
         exit 0;;
      --remove-last)
         sed -i '$d' $FILE_DEST
         exit 0;;
      -u|--untracked)
         git ls-files --others --exclude-standard >> "$FILE_DEST"
         exit 0;;
      -h|--help) # --help is captured by git and converted in git help so is useless by now
         help ;;
      --)
         shift

         if [ $# == 0 ]
         then
            cat >&2 <<EOF

         At least one argument must be provided
EOF
            help
            exit 1
         fi

         for param
         do
            echo "$param" >> "$FILE_DEST"
         done
         break ;;
      *)
         cat <&2 <<EOF

Error, unknown arguments $@
EOF
         help
         exit 1 ;;
   esac
   shift
done

